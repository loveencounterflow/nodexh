{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\n############################################################################################################\n############################################################################################################\n### see https://medium.com/@nodejs/source-maps-in-node-js-482872b56116\n############################################################################################################\n############################################################################################################\n############################################################################################################\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'nodexh'\nlog                       = CND.get_logger 'plain',     badge\ndebug                     = CND.get_logger 'debug',     badge\ninfo                      = CND.get_logger 'info',      badge\nwarn                      = CND.get_logger 'warn',      badge\nalert                     = CND.get_logger 'alert',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nstackman                  = ( require 'stackman' )()\nFS                        = require 'fs'\nPATH                      = require 'path'\n{ red\n  green\n  steel\n  grey\n  cyan\n  bold\n  gold\n  reverse\n  white\n  yellow\n  reverse\n  underline\n  bold }                  = CND\n# types                     = new ( require '../../intertype' ).Intertype()\n# { isa }                   = types.export()\n\n#-----------------------------------------------------------------------------------------------------------\nalertxxx = ( P... ) -> process.stdout.write ' ' + CND.pen P...\n\n#-----------------------------------------------------------------------------------------------------------\nget_context = ( path, linenr, colnr ) ->\n  ### TAINT use stackman.sourceContexts() instead ###\n  try\n    lines     = ( FS.readFileSync path, { encoding: 'utf-8' } ).split '\\n'\n    delta     = 1\n    coldelta  = 5\n    effect    = underline\n    effect    = bold\n    effect    = reverse\n    first_idx = Math.max 0, linenr - 1 - delta\n    last_idx  = Math.min lines.length - 1, linenr - 1 + delta\n    R         = []\n    for line, idx in lines[ first_idx .. last_idx ]\n      this_linenr = first_idx + idx + 1\n      lnr = ( this_linenr.toString().padStart 4 ) + 'â”‚ '\n      if this_linenr is linenr\n        c0  = colnr - 1\n        c1  = colnr + coldelta\n        line = line[ ... c0 ] + ( effect line[ c0 ... c1 ] ) + line[ c1 .. ]\n        R.push  \"#{grey lnr}#{cyan line}\"\n      else\n        R.push  \"#{grey lnr}#{grey line}\"\n    # R = R.join '\\n'\n  catch error\n    throw error unless error.code is 'ENOENT'\n    return [ ( red \"!!! #{rpr error.message} !!!\" ), ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nresolve_locations = ( frames, handler ) ->\n  load_source_map = require 'load-source-map'\n  debug '^3334^', ( k for k of load_source_map )\n  for frame in frames\n    path  = frame.file\n    path  = null if path in [ '', undefined, ]\n    continue unless path?\n    do ( path ) ->\n      load_source_map path, ( lsm_error, sourcemap ) ->\n        return if lsm_error?\n        return unless sourcemap?\n        # return handler error if error?\n        # return handler() unless sourcemap?\n        position  = sourcemap.originalPositionFor { line: linenr, column: colnr, }\n        linenr    = position.line\n        colnr     = position.column\n        # debug '^3387^', ( k for k of sourcemap )\n        whisper 'load-source-map', position\n        whisper 'load-source-map', { path, linenr, colnr, }\n  handler()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nshow_error_with_source_context = ( error, headline ) ->\n  arrowhead   = white 'â–²'\n  arrowshaft  = white 'â”‚'\n  width       = process.stdout.columns\n  # demo_error_stack_parser error\n  # debug CND.cyan error.stack\n  ##########################################################################################################\n  stackman.callsites error, ( stackman_error, callsites ) ->\n    throw stackman_error if stackman_error?\n    callsites.reverse()\n    callsites.forEach ( callsite ) ->\n      unless ( path = callsite.getFileName() )?\n        alertxxx grey 'â€”'.repeat 108\n        return null\n      linenr    = callsite.getLineNumber()\n      colnr     = callsite.getColumnNumber()\n      relpath     = PATH.relative process.cwd(), path\n      # debug \"^8887^ #{rpr {path, linenr, callsite:callsite.getFileName(),sourceContexts:null}}\"\n      if path.startsWith 'internal/'\n        alertxxx arrowhead, grey \"#{relpath} ##{linenr}\"\n        return null\n      # alertxxx()\n      # alertxxx steel bold reverse ( \"#{relpath} ##{linenr}:\" ).padEnd 108\n      alertxxx arrowhead, gold ( \"#{relpath} ##{linenr}: \\x1b[38;05;234m\".padEnd width, 'â€”' )\n      source      = get_context path, linenr, colnr\n      alertxxx arrowshaft, line for line in source\n      return null\n      alert reverse bold headline\n    # if error?.message?\n    return null\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@exit_handler = ( exception ) ->\n  print               = alert\n  message             = ' EXCEPTION: ' + ( exception?.message ? \"an unrecoverable condition occurred\" )\n  if exception?.where?\n    message += '\\n--------------------\\n' + exception.where + '\\n--------------------'\n  [ head, tail..., ]  = message.split '\\n'\n  print reverse ' ' + head + ' '\n  warn line for line in tail\n  if exception?.stack?\n    show_error_with_source_context exception, ' ' + head + ' '\n  else\n    whisper exception?.stack ? \"(exception undefined, no stack)\"\n  process.exitCode = 1\n@exit_handler = @exit_handler.bind @\n\n\n############################################################################################################\nunless global[ Symbol.for 'cnd-exception-handler' ]?\n  global[ Symbol.for 'cnd-exception-handler' ] = true\n  if process.type is 'renderer'\n    window.addEventListener 'error', ( event ) =>\n      # event.preventDefault()\n      message = ( event.error?.message ? \"(error without message)\" ) + '\\n' + ( event.error?.stack ? '' )[ ... 500 ]\n      OPS.log message\n      # @exit_handler event.error\n      OPS.open_devtools()\n      return true\n\n    window.addEventListener 'unhandledrejection', ( event ) =>\n      # event.preventDefault()\n      message = ( event.reason?.message ? \"(error without message)\" ) + '\\n' + ( event.reason?.stack ? '' )[ ... 500 ]\n      OPS.log message\n      # @exit_handler event.reason\n      OPS.open_devtools()\n      return true\n  else\n    process.on 'uncaughtException',  @exit_handler\n    process.on 'unhandledRejection', @exit_handler\n\n"
  ]
}